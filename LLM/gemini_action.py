import google.generativeai as genai
import json
import re
import os

# üîπ C·∫•u h√¨nh API Gemini
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# Th∆∞ m·ª•c l∆∞u file JSON
ACTION_FOLDER = "actions"
os.makedirs(ACTION_FOLDER, exist_ok=True)  # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥

def generate_json(user_text):
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ ph√¢n t√≠ch c√¢u l·ªánh v√† tr√≠ch xu·∫•t action."""
    model = genai.GenerativeModel("gemini-2.0-pro-exp-02-05")
    
    prompt = f"""
    Chuy·ªÉn l·ªánh t·ª´ ng∆∞·ªùi d√πng th√†nh file JSON:
    "{user_text}" user_text = '{user_text}'
    H√£y l√†m h√†nh ƒë·ªông xin ch√†o
    JSON format:
    {{
        "action": "xin ch√†o",  
    }}
    """
    response = model.generate_content(prompt)
    try:
        raw_response = response.text
        match = re.search(r'```json\n(.*?)\n```', raw_response, re.DOTALL)
        clean_json = match.group(1) if match else raw_response
        json_data = json.loads(clean_json)
        return json_data
    except json.JSONDecodeError:
        print("L·ªói JSON t·ª´ Gemini!")
        return None

def check_action_exists(action_name):
    """Ki·ªÉm tra xem h√†nh ƒë·ªông ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c hay ch∆∞a."""
    file_path = os.path.join(ACTION_FOLDER, f"{action_name}.json")
    return os.path.exists(file_path)

def save_action_json(json_data):
    """L∆∞u JSON v√†o th∆∞ m·ª•c actions/ v·ªõi t√™n file theo action n·∫øu ch∆∞a t·ªìn t·∫°i."""
    if not json_data or not json_data.get("action"):
        print("L·ªói: Kh√¥ng c√≥ h√†nh ƒë·ªông h·ª£p l·ªá ƒë·ªÉ l∆∞u!")
        return False

    action_name = json_data["action"].replace(" ", "").lower()  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng, vi·∫øt th∆∞·ªùng
    
    # Ki·ªÉm tra xem h√†nh ƒë·ªông ƒë√£ t·ªìn t·∫°i ch∆∞a
    if check_action_exists(action_name):
        print(f"H√†nh ƒë·ªông '{json_data['action']}' ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn t·∫°o l·∫°i file JSON.")
        return False
    
    # N·∫øu h√†nh ƒë·ªông ch∆∞a t·ªìn t·∫°i, l∆∞u file JSON m·ªõi
    file_path = os.path.join(ACTION_FOLDER, f"{action_name}.json")
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(json_data, f, indent=4, ensure_ascii=False)

    print(f"ƒê√£ l∆∞u h√†nh ƒë·ªông m·ªõi v√†o: {file_path}")
    return True

def load_existing_action(action_name):
    """T·∫£i n·ªôi dung JSON c·ªßa h√†nh ƒë·ªông ƒë√£ t·ªìn t·∫°i."""
    file_path = os.path.join(ACTION_FOLDER, f"{action_name}.json")
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

while True:
    user_text = input()
    if user_text.lower() == "t·∫°m bi·ªát":
        print("T·∫°m bi·ªát!")
        break
    
    # Ph√¢n t√≠ch c√¢u l·ªánh t·ª´ ng∆∞·ªùi d√πng
    json_data = generate_json(user_text)
    if not json_data:
        continue
        
    action_name = json_data["action"].replace(" ", "").lower()
    
    # Ki·ªÉm tra v√† l∆∞u h√†nh ƒë·ªông (n·∫øu c·∫ßn)
    is_new_action = save_action_json(json_data)
    
    # N·∫øu kh√¥ng ph·∫£i h√†nh ƒë·ªông m·ªõi, t·∫£i h√†nh ƒë·ªông hi·ªán c√≥
    if not is_new_action:
        existing_data = load_existing_action(action_name)
        if existing_data:
            json_data = existing_data
    
    # In JSON tr√™n terminal
    print("\nJSON ƒë∆∞·ª£c s·ª≠ d·ª•ng:")
    print(json.dumps(json_data, indent=4, ensure_ascii=False))